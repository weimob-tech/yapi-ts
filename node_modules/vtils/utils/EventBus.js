/**
 * 事件巴士，管理事件的发布与订阅。
 *
 * @template TListeners 事件名称及其对应的回调描述
 * @example
 * ```typescript
 * const bus = new EventBus<{
 *   success: (payload: { message: string }) => any
 * }>()
 * bus.on('success', ({ message }) => console.log(message))
 * bus.emit('success', { message: '提交成功' })
 * // => 控制台输出: 提交成功
 * ```
 */
export var EventBus = /*#__PURE__*/function () {
  /**
   * 构造函数。
   */
  function EventBus(options) {
    this.options = options;
    this.callbacks = Object.create(null);
  }
  /**
   * 回调列表。
   */


  var _proto = EventBus.prototype;

  /**
   * 订阅事件。
   *
   * @param eventName 事件名称
   * @param callback 事件触发回调
   * @returns 返回取消订阅的函数
   */
  _proto.on = function on(eventName, callback) {
    var _this$options$beforeO,
        _this$options,
        _this$options$beforeO2,
        _this$options$beforeO3,
        _this = this;

    if (!this.callbacks[eventName]) {
      this.callbacks[eventName] = [];
    }

    callback = (_this$options$beforeO = (_this$options = this.options) == null ? void 0 : (_this$options$beforeO2 = _this$options.beforeOn) == null ? void 0 : (_this$options$beforeO3 = _this$options$beforeO2[eventName]) == null ? void 0 : _this$options$beforeO3.call(this, callback)) != null ? _this$options$beforeO : callback;
    var index = this.callbacks[eventName].indexOf(callback);

    if (index === -1) {
      this.callbacks[eventName].push(callback);
    }

    return function () {
      return _this.off(eventName, callback);
    };
  }
  /**
   * 订阅事件，但只订阅一次即取消订阅。
   *
   * @param eventName 事件名称
   * @param callback 事件触发回调
   * @returns 返回取消订阅的函数
   */
  ;

  _proto.once = function once(eventName, callback) {
    var off = this.on(eventName, function () {
      off();
      callback.apply(void 0, arguments);
    });
    return off;
  }
  /**
   * 取消订阅事件，若没有指定回调，则取消所有回调。
   *
   * @param eventName 事件名称
   * @param callback 事件触发回调
   */
  ;

  _proto.off = function off(eventName, callbackOrTag) {
    if (this.callbacks[eventName] && callbackOrTag) {
      if (typeof callbackOrTag === 'function') {
        var index = this.callbacks[eventName].indexOf(callbackOrTag);

        if (index > -1) {
          this.callbacks[eventName].splice(index, 1);
        }
      } else {
        var _index = this.callbacks[eventName].length;

        while (_index--) {
          if (this.callbacks[eventName][_index].__EVENT_BUS_TAG__ != null && this.callbacks[eventName][_index].__EVENT_BUS_TAG__ === callbackOrTag) {
            this.callbacks[eventName].splice(_index, 1);
          }
        }
      }
    } else {
      delete this.callbacks[eventName];
    }
  }
  /**
   * 发布事件。
   *
   * @param eventNameAndContext 事件名称和上下文
   * @param args 传给事件回调的参数
   * @returns 返回各事件回调的返回结果组成的数组
   */
  ;

  _proto.emit = function emit( // @ts-ignore
  eventName) {
    var _this$options2, _this$options2$before, _this$options2$before2;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _ref = typeof eventName === 'object' ? eventName : {
      name: eventName
    },
        name = _ref.name,
        context = _ref.context,
        tag = _ref.tag;

    var callbacks = (this.callbacks[name] || []).slice();

    if (tag != null) {
      callbacks = callbacks.filter(function (callback) {
        return callback.__EVENT_BUS_TAG__ != null && tag === callback.__EVENT_BUS_TAG__;
      });
    }

    (_this$options2 = this.options) == null ? void 0 : (_this$options2$before = _this$options2.beforeEmit) == null ? void 0 : (_this$options2$before2 = _this$options2$before[name]) == null ? void 0 : _this$options2$before2.call(this, context);
    return callbacks.map(function (callback) {
      return callback.call.apply(callback, [context].concat(args));
    });
  }
  /**
   * 清空事件订阅。
   */
  ;

  _proto.clear = function clear() {
    this.callbacks = Object.create(null);
  }
  /**
   * 销毁。
   */
  ;

  _proto.destroy = function destroy() {
    // @ts-ignore
    this.callbacks = null;
  };

  return EventBus;
}();