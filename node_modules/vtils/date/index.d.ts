/**
 * 日期时间工具库。基于 {@link https://date-fns.org/v2.14.0/docs/Getting-Started | date-fns}。
 *
 * @packageDocumentation
 */

import { add } from 'date-fns/esm';
import { addBusinessDays } from 'date-fns/esm';
import { addDays } from 'date-fns/esm';
import { addHours } from 'date-fns/esm';
import { addISOWeekYears } from 'date-fns/esm';
import { addMilliseconds } from 'date-fns/esm';
import { addMinutes } from 'date-fns/esm';
import { addMonths } from 'date-fns/esm';
import { addQuarters } from 'date-fns/esm';
import { addSeconds } from 'date-fns/esm';
import { addWeeks } from 'date-fns/esm';
import { addYears } from 'date-fns/esm';
import { af } from 'date-fns/esm/locale';
import { arDZ } from 'date-fns/esm/locale';
import { areIntervalsOverlapping } from 'date-fns/esm';
import { arMA } from 'date-fns/esm/locale';
import { arSA } from 'date-fns/esm/locale';
import { arTN } from 'date-fns/esm/locale';
import { az } from 'date-fns/esm/locale';
import { be } from 'date-fns/esm/locale';
import { bg } from 'date-fns/esm/locale';
import { bn } from 'date-fns/esm/locale';
import { bs } from 'date-fns/esm/locale';
import { ca } from 'date-fns/esm/locale';
import { clamp } from 'date-fns/esm';
import { closestIndexTo } from 'date-fns/esm';
import { closestTo } from 'date-fns/esm';
import { compareAsc } from 'date-fns/esm';
import { compareDesc } from 'date-fns/esm';
import { cs } from 'date-fns/esm/locale';
import { cy } from 'date-fns/esm/locale';
import { da } from 'date-fns/esm/locale';
import { daysToWeeks } from 'date-fns/esm';
import { de } from 'date-fns/esm/locale';
import { deAT } from 'date-fns/esm/locale';
import { differenceInBusinessDays } from 'date-fns/esm';
import { differenceInCalendarDays } from 'date-fns/esm';
import { differenceInCalendarISOWeeks } from 'date-fns/esm';
import { differenceInCalendarISOWeekYears } from 'date-fns/esm';
import { differenceInCalendarMonths } from 'date-fns/esm';
import { differenceInCalendarQuarters } from 'date-fns/esm';
import { differenceInCalendarWeeks } from 'date-fns/esm';
import { differenceInCalendarYears } from 'date-fns/esm';
import { differenceInDays } from 'date-fns/esm';
import { differenceInHours } from 'date-fns/esm';
import { differenceInISOWeekYears } from 'date-fns/esm';
import { differenceInMilliseconds } from 'date-fns/esm';
import { differenceInMinutes } from 'date-fns/esm';
import { differenceInMonths } from 'date-fns/esm';
import { differenceInQuarters } from 'date-fns/esm';
import { differenceInSeconds } from 'date-fns/esm';
import { differenceInWeeks } from 'date-fns/esm';
import { differenceInYears } from 'date-fns/esm';
import { eachDayOfInterval } from 'date-fns/esm';
import { eachHourOfInterval } from 'date-fns/esm';
import { eachMinuteOfInterval } from 'date-fns/esm';
import { eachMonthOfInterval } from 'date-fns/esm';
import { eachQuarterOfInterval } from 'date-fns/esm';
import { eachWeekendOfInterval } from 'date-fns/esm';
import { eachWeekendOfMonth } from 'date-fns/esm';
import { eachWeekendOfYear } from 'date-fns/esm';
import { eachWeekOfInterval } from 'date-fns/esm';
import { eachYearOfInterval } from 'date-fns/esm';
import { el } from 'date-fns/esm/locale';
import { enAU } from 'date-fns/esm/locale';
import { enCA } from 'date-fns/esm/locale';
import { endOfDay } from 'date-fns/esm';
import { endOfDecade } from 'date-fns/esm';
import { endOfHour } from 'date-fns/esm';
import { endOfISOWeek } from 'date-fns/esm';
import { endOfISOWeekYear } from 'date-fns/esm';
import { endOfMinute } from 'date-fns/esm';
import { endOfMonth } from 'date-fns/esm';
import { endOfQuarter } from 'date-fns/esm';
import { endOfSecond } from 'date-fns/esm';
import { endOfToday } from 'date-fns/esm';
import { endOfTomorrow } from 'date-fns/esm';
import { endOfWeek } from 'date-fns/esm';
import { endOfYear } from 'date-fns/esm';
import { endOfYesterday } from 'date-fns/esm';
import { enGB } from 'date-fns/esm/locale';
import { enIN } from 'date-fns/esm/locale';
import { enNZ } from 'date-fns/esm/locale';
import { enUS } from 'date-fns/esm/locale';
import { enZA } from 'date-fns/esm/locale';
import { eo } from 'date-fns/esm/locale';
import { es } from 'date-fns/esm/locale';
import { et } from 'date-fns/esm/locale';
import { eu } from 'date-fns/esm/locale';
import { faIR } from 'date-fns/esm/locale';
import { fi } from 'date-fns/esm/locale';
import { format } from 'date-fns/esm';
import { formatDistance } from 'date-fns/esm';
import { formatDistanceStrict } from 'date-fns/esm';
import { formatDistanceToNow } from 'date-fns/esm';
import { formatDistanceToNowStrict } from 'date-fns/esm';
import { formatDuration } from 'date-fns/esm';
import { formatISO } from 'date-fns/esm';
import { formatISO9075 } from 'date-fns/esm';
import { formatISODuration } from 'date-fns/esm';
import { formatRelative } from 'date-fns/esm';
import { formatRFC3339 } from 'date-fns/esm';
import { formatRFC7231 } from 'date-fns/esm';
import { fr } from 'date-fns/esm/locale';
import { frCA } from 'date-fns/esm/locale';
import { fromUnixTime } from 'date-fns/esm';
import { gd } from 'date-fns/esm/locale';
import { getDate } from 'date-fns/esm';
import { getDay } from 'date-fns/esm';
import { getDayOfYear } from 'date-fns/esm';
import { getDaysInMonth } from 'date-fns/esm';
import { getDaysInYear } from 'date-fns/esm';
import { getDecade } from 'date-fns/esm';
import { getHours } from 'date-fns/esm';
import { getISODay } from 'date-fns/esm';
import { getISOWeek } from 'date-fns/esm';
import { getISOWeeksInYear } from 'date-fns/esm';
import { getISOWeekYear } from 'date-fns/esm';
import { getMilliseconds } from 'date-fns/esm';
import { getMinutes } from 'date-fns/esm';
import { getMonth } from 'date-fns/esm';
import { getOverlappingDaysInIntervals } from 'date-fns/esm';
import { getQuarter } from 'date-fns/esm';
import { getSeconds } from 'date-fns/esm';
import { getTime } from 'date-fns/esm';
import { getUnixTime } from 'date-fns/esm';
import { getWeek } from 'date-fns/esm';
import { getWeekOfMonth } from 'date-fns/esm';
import { getWeeksInMonth } from 'date-fns/esm';
import { getWeekYear } from 'date-fns/esm';
import { getYear } from 'date-fns/esm';
import { gl } from 'date-fns/esm/locale';
import { gu } from 'date-fns/esm/locale';
import { he } from 'date-fns/esm/locale';
import { hi } from 'date-fns/esm/locale';
import { hoursToMilliseconds } from 'date-fns/esm';
import { hoursToMinutes } from 'date-fns/esm';
import { hoursToSeconds } from 'date-fns/esm';
import { hr } from 'date-fns/esm/locale';
import { ht } from 'date-fns/esm/locale';
import { hu } from 'date-fns/esm/locale';
import { hy } from 'date-fns/esm/locale';
import { id } from 'date-fns/esm/locale';
import { intervalToDuration } from 'date-fns/esm';
import { intlFormat } from 'date-fns/esm';
import { is } from 'date-fns/esm/locale';
import { isAfter } from 'date-fns/esm';
import { isBefore } from 'date-fns/esm';
import { isDate } from 'date-fns/esm';
import { isEqual } from 'date-fns/esm';
import { isExists } from 'date-fns/esm';
import { isFirstDayOfMonth } from 'date-fns/esm';
import { isFriday } from 'date-fns/esm';
import { isFuture } from 'date-fns/esm';
import { isLastDayOfMonth } from 'date-fns/esm';
import { isLeapYear } from 'date-fns/esm';
import { isMatch } from 'date-fns/esm';
import { isMonday } from 'date-fns/esm';
import { isPast } from 'date-fns/esm';
import { isSameDay } from 'date-fns/esm';
import { isSameHour } from 'date-fns/esm';
import { isSameISOWeek } from 'date-fns/esm';
import { isSameISOWeekYear } from 'date-fns/esm';
import { isSameMinute } from 'date-fns/esm';
import { isSameMonth } from 'date-fns/esm';
import { isSameQuarter } from 'date-fns/esm';
import { isSameSecond } from 'date-fns/esm';
import { isSameWeek } from 'date-fns/esm';
import { isSameYear } from 'date-fns/esm';
import { isSaturday } from 'date-fns/esm';
import { isSunday } from 'date-fns/esm';
import { isThisHour } from 'date-fns/esm';
import { isThisISOWeek } from 'date-fns/esm';
import { isThisMinute } from 'date-fns/esm';
import { isThisMonth } from 'date-fns/esm';
import { isThisQuarter } from 'date-fns/esm';
import { isThisSecond } from 'date-fns/esm';
import { isThisWeek } from 'date-fns/esm';
import { isThisYear } from 'date-fns/esm';
import { isThursday } from 'date-fns/esm';
import { isToday } from 'date-fns/esm';
import { isTomorrow } from 'date-fns/esm';
import { isTuesday } from 'date-fns/esm';
import { isValid } from 'date-fns/esm';
import { isWednesday } from 'date-fns/esm';
import { isWeekend } from 'date-fns/esm';
import { isWithinInterval } from 'date-fns/esm';
import { isYesterday } from 'date-fns/esm';
import { it as it_2 } from 'date-fns/esm/locale';
import { ja } from 'date-fns/esm/locale';
import { ka } from 'date-fns/esm/locale';
import { kk } from 'date-fns/esm/locale';
import { kn } from 'date-fns/esm/locale';
import { ko } from 'date-fns/esm/locale';
import { lastDayOfDecade } from 'date-fns/esm';
import { lastDayOfISOWeek } from 'date-fns/esm';
import { lastDayOfISOWeekYear } from 'date-fns/esm';
import { lastDayOfMonth } from 'date-fns/esm';
import { lastDayOfQuarter } from 'date-fns/esm';
import { lastDayOfWeek } from 'date-fns/esm';
import { lastDayOfYear } from 'date-fns/esm';
import { lb } from 'date-fns/esm/locale';
import { lightFormat } from 'date-fns/esm';
import { lt } from 'date-fns/esm/locale';
import { lv } from 'date-fns/esm/locale';
import { max } from 'date-fns/esm';
import { milliseconds } from 'date-fns/esm';
import { millisecondsToHours } from 'date-fns/esm';
import { millisecondsToMinutes } from 'date-fns/esm';
import { millisecondsToSeconds } from 'date-fns/esm';
import { min } from 'date-fns/esm';
import { minutesToHours } from 'date-fns/esm';
import { minutesToMilliseconds } from 'date-fns/esm';
import { minutesToSeconds } from 'date-fns/esm';
import { mk } from 'date-fns/esm/locale';
import { mn } from 'date-fns/esm/locale';
import { monthsToQuarters } from 'date-fns/esm';
import { monthsToYears } from 'date-fns/esm';
import { ms } from 'date-fns/esm/locale';
import { mt } from 'date-fns/esm/locale';
import { nb } from 'date-fns/esm/locale';
import { nextDay } from 'date-fns/esm';
import { nextFriday } from 'date-fns/esm';
import { nextMonday } from 'date-fns/esm';
import { nextSaturday } from 'date-fns/esm';
import { nextSunday } from 'date-fns/esm';
import { nextThursday } from 'date-fns/esm';
import { nextTuesday } from 'date-fns/esm';
import { nextWednesday } from 'date-fns/esm';
import { nl } from 'date-fns/esm/locale';
import { nn } from 'date-fns/esm/locale';
import { parse } from 'date-fns/esm';
import { parseISO } from 'date-fns/esm';
import { parseJSON } from 'date-fns/esm';
import { pl } from 'date-fns/esm/locale';
import { previousDay } from 'date-fns/esm';
import { previousFriday } from 'date-fns/esm';
import { previousMonday } from 'date-fns/esm';
import { previousSaturday } from 'date-fns/esm';
import { previousSunday } from 'date-fns/esm';
import { previousThursday } from 'date-fns/esm';
import { previousTuesday } from 'date-fns/esm';
import { previousWednesday } from 'date-fns/esm';
import { pt } from 'date-fns/esm/locale';
import { ptBR } from 'date-fns/esm/locale';
import { quartersToMonths } from 'date-fns/esm';
import { quartersToYears } from 'date-fns/esm';
import { ro } from 'date-fns/esm/locale';
import { roundToNearestMinutes } from 'date-fns/esm';
import { ru } from 'date-fns/esm/locale';
import { secondsToHours } from 'date-fns/esm';
import { secondsToMilliseconds } from 'date-fns/esm';
import { secondsToMinutes } from 'date-fns/esm';
import { set } from 'date-fns/esm';
import { setDate } from 'date-fns/esm';
import { setDay } from 'date-fns/esm';
import { setDayOfYear } from 'date-fns/esm';
import { setHours } from 'date-fns/esm';
import { setISODay } from 'date-fns/esm';
import { setISOWeek } from 'date-fns/esm';
import { setISOWeekYear } from 'date-fns/esm';
import { setMilliseconds } from 'date-fns/esm';
import { setMinutes } from 'date-fns/esm';
import { setMonth } from 'date-fns/esm';
import { setQuarter } from 'date-fns/esm';
import { setSeconds } from 'date-fns/esm';
import { setWeek } from 'date-fns/esm';
import { setWeekYear } from 'date-fns/esm';
import { setYear } from 'date-fns/esm';
import { sk } from 'date-fns/esm/locale';
import { sl } from 'date-fns/esm/locale';
import { sq } from 'date-fns/esm/locale';
import { sr } from 'date-fns/esm/locale';
import { srLatn } from 'date-fns/esm/locale';
import { startOfDay } from 'date-fns/esm';
import { startOfDecade } from 'date-fns/esm';
import { startOfHour } from 'date-fns/esm';
import { startOfISOWeek } from 'date-fns/esm';
import { startOfISOWeekYear } from 'date-fns/esm';
import { startOfMinute } from 'date-fns/esm';
import { startOfMonth } from 'date-fns/esm';
import { startOfQuarter } from 'date-fns/esm';
import { startOfSecond } from 'date-fns/esm';
import { startOfToday } from 'date-fns/esm';
import { startOfTomorrow } from 'date-fns/esm';
import { startOfWeek } from 'date-fns/esm';
import { startOfWeekYear } from 'date-fns/esm';
import { startOfYear } from 'date-fns/esm';
import { startOfYesterday } from 'date-fns/esm';
import { sub } from 'date-fns/esm';
import { subBusinessDays } from 'date-fns/esm';
import { subDays } from 'date-fns/esm';
import { subHours } from 'date-fns/esm';
import { subISOWeekYears } from 'date-fns/esm';
import { subMilliseconds } from 'date-fns/esm';
import { subMinutes } from 'date-fns/esm';
import { subMonths } from 'date-fns/esm';
import { subQuarters } from 'date-fns/esm';
import { subSeconds } from 'date-fns/esm';
import { subWeeks } from 'date-fns/esm';
import { subYears } from 'date-fns/esm';
import { sv } from 'date-fns/esm/locale';
import { ta } from 'date-fns/esm/locale';
import { te } from 'date-fns/esm/locale';
import { th } from 'date-fns/esm/locale';
import { toDate } from 'date-fns/esm';
import { tr } from 'date-fns/esm/locale';
import { ug } from 'date-fns/esm/locale';
import { uk } from 'date-fns/esm/locale';
import { uz } from 'date-fns/esm/locale';
import { vi } from 'date-fns/esm/locale';
import { weeksToDays } from 'date-fns/esm';
import { yearsToMonths } from 'date-fns/esm';
import { yearsToQuarters } from 'date-fns/esm';
import { zhCN } from 'date-fns/esm/locale';
import { zhTW } from 'date-fns/esm/locale';

export { add }

export { addBusinessDays }

export { addDays }

export { addHours }

export { addISOWeekYears }

export { addMilliseconds }

export { addMinutes }

export { addMonths }

export { addQuarters }

export { addSeconds }

export { addWeeks }

export { addYears }

export { af }

/**
 * 增强版的 toDate，支持：
 * - 秒时间戳、毫秒时间戳；
 * - Date 实例；
 * - 符合 ISO 标准的时间字符串。
 *
 * @param value 要转换的值
 * @returns 返回转换后的 Date 实例
 */
export declare function anyToDate(value: string | number | Date): Date;

export { arDZ }

export { areIntervalsOverlapping }

export { arMA }

export { arSA }

export { arTN }

export { az }

export { be }

export { bg }

export { bn }

export { bs }

export { ca }

export { clamp }

export { closestIndexTo }

export { closestTo }

export { compareAsc }

export { compareDesc }

export { cs }

export { cy }

export { da }

export { daysToWeeks }

export { de }

export { deAT }

export { differenceInBusinessDays }

export { differenceInCalendarDays }

export { differenceInCalendarISOWeeks }

export { differenceInCalendarISOWeekYears }

export { differenceInCalendarMonths }

export { differenceInCalendarQuarters }

export { differenceInCalendarWeeks }

export { differenceInCalendarYears }

export { differenceInDays }

export { differenceInHours }

export { differenceInISOWeekYears }

export { differenceInMilliseconds }

export { differenceInMinutes }

export { differenceInMonths }

export { differenceInQuarters }

export { differenceInSeconds }

export { differenceInWeeks }

export { differenceInYears }

export { eachDayOfInterval }

export { eachHourOfInterval }

export { eachMinuteOfInterval }

export { eachMonthOfInterval }

export { eachQuarterOfInterval }

export { eachWeekendOfInterval }

export { eachWeekendOfMonth }

export { eachWeekendOfYear }

export { eachWeekOfInterval }

export { eachYearOfInterval }

export { el }

export { enAU }

export { enCA }

export { endOfDay }

export { endOfDecade }

export { endOfHour }

export { endOfISOWeek }

export { endOfISOWeekYear }

export { endOfMinute }

export { endOfMonth }

export { endOfQuarter }

export { endOfSecond }

export { endOfToday }

export { endOfTomorrow }

export { endOfWeek }

export { endOfYear }

export { endOfYesterday }

export { enGB }

export { enIN }

export { enNZ }

export { enUS }

export { enZA }

export { eo }

export { es }

export { et }

export { eu }

export { faIR }

export { fi }

export { format }

/**
 * 格式化日期。
 *
 * @public
 * @param date 要格式化的日期，支持 Date、秒或毫秒时间戳
 * @param renderer 渲染器
 * @returns 返回格式化后的日期
 * @example
 * ```typescript
 * formatDate(
 *   new Date(2020, 5 - 1, 20, 13, 14, 21),
 *   _ => `${_.yyyy}-${_.mm}-${_.dd} ${_.hh}:${_.ii}:${_.ss}`,
 * ) // => '2020-05-20 13:14:21'
 * ```
 */
export declare function formatDate(date: Date | number, renderer: FormatDateRenderer): string;

/**
 * 日期格式化占位符。
 *
 * @public
 */
export declare enum FormatDatePlaceholder {
    /**
     * 年：`44, 1, 1900, 2017`
     */
    y = "y",
    /**
     * 年：`0044, 0001, 1900, 2017`
     */
    yyyy = "yyyy",
    /**
     * 月：`1, 2, ..., 12`
     */
    m = "M",
    /**
     * 月：`01, 02, ..., 12`
     */
    mm = "MM",
    /**
     * 日：`1, 2, ..., 31`
     */
    d = "d",
    /**
     * 日：`01, 02, ..., 31`
     */
    dd = "dd",
    /**
     * 时：`0, 1, 2, ..., 23`
     */
    h = "H",
    /**
     * 时：`00, 01, 02, ..., 23`
     */
    hh = "HH",
    /**
     * 分：`0, 1, ..., 59`
     */
    i = "m",
    /**
     * 分：`00, 01, ..., 59`
     */
    ii = "mm",
    /**
     * 秒：`0, 1, ..., 59`
     */
    s = "s",
    /**
     * 秒：`00, 01, ..., 59`
     */
    ss = "ss"
}

/**
 * 日期格式化渲染器。
 *
 * @public
 * @param placeholders 占位符
 * @returns 返回渲染字符串
 */
export declare type FormatDateRenderer = ((placeholders: typeof FormatDatePlaceholder) => string) | string;

export { formatDistance }

/**
 * 将时间转化为 `xxx前` 表示。
 *
 * @param date 时间
 */
export declare function formatDistanceAgo(date: number | Date): string;

export { formatDistanceStrict }

export { formatDistanceToNow }

export { formatDistanceToNowStrict }

export { formatDuration }

export { formatISO }

export { formatISO9075 }

export { formatISODuration }

export { formatRelative }

export { formatRFC3339 }

export { formatRFC7231 }

export { fr }

export { frCA }

export { fromUnixTime }

export { gd }

export { getDate }

export { getDay }

export { getDayOfYear }

export { getDaysInMonth }

export { getDaysInYear }

export { getDecade }

export { getHours }

export { getISODay }

export { getISOWeek }

export { getISOWeeksInYear }

export { getISOWeekYear }

export { getMilliseconds }

export { getMinutes }

export { getMonth }

export { getOverlappingDaysInIntervals }

export { getQuarter }

export { getSeconds }

export { getTime }

export { getUnixTime }

export { getWeek }

export { getWeekOfMonth }

export { getWeeksInMonth }

export { getWeekYear }

export { getYear }

export { gl }

export { gu }

export { he }

export { hi }

export { hoursToMilliseconds }

export { hoursToMinutes }

export { hoursToSeconds }

export { hr }

export { ht }

export { hu }

export { hy }

export { id }

export { intervalToDuration }

export declare function intervalToRestrictiveDuration(start: string | number | Date, end: string | number | Date, target?: IntervalToRestrictiveDurationTarget): IntervalToRestrictiveDurationResult;

export declare interface IntervalToRestrictiveDurationResult {
    years: number;
    months: number;
    days: number;
    hours: number;
    minutes: number;
    seconds: number;
    milliseconds: number;
}

export declare type IntervalToRestrictiveDurationTarget = 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'millisecond';

export { intlFormat }

export { is }

export { isAfter }

export { isBefore }

export { isDate }

export { isEqual }

export { isExists }

export { isFirstDayOfMonth }

export { isFriday }

export { isFuture }

export { isLastDayOfMonth }

export { isLeapYear }

export { isMatch }

export { isMonday }

export { isPast }

export { isSameDay }

export { isSameHour }

export { isSameISOWeek }

export { isSameISOWeekYear }

export { isSameMinute }

export { isSameMonth }

export { isSameQuarter }

export { isSameSecond }

export { isSameWeek }

export { isSameYear }

export { isSaturday }

export { isSunday }

export { isThisHour }

export { isThisISOWeek }

export { isThisMinute }

export { isThisMonth }

export { isThisQuarter }

export { isThisSecond }

export { isThisWeek }

export { isThisYear }

export { isThursday }

export { isToday }

export { isTomorrow }

export { isTuesday }

export { isValid }

export { isWednesday }

export { isWeekend }

export { isWithinInterval }

export { isYesterday }

export { it_2 as it }

export { ja }

export { ka }

export { kk }

export { kn }

export { ko }

export { lastDayOfDecade }

export { lastDayOfISOWeek }

export { lastDayOfISOWeekYear }

export { lastDayOfMonth }

export { lastDayOfQuarter }

export { lastDayOfWeek }

export { lastDayOfYear }

export { lb }

export { lightFormat }

export { lt }

export { lv }

export { max }

export { milliseconds }

export { millisecondsToHours }

export { millisecondsToMinutes }

export { millisecondsToSeconds }

export { min }

export { minutesToHours }

export { minutesToMilliseconds }

export { minutesToSeconds }

export { mk }

export { mn }

export { monthsToQuarters }

export { monthsToYears }

export { ms }

export { mt }

export { nb }

export { nextDay }

export { nextFriday }

export { nextMonday }

export { nextSaturday }

export { nextSunday }

export { nextThursday }

export { nextTuesday }

export { nextWednesday }

export { nl }

export { nn }

/**
 * 数字星期。
 *
 * @public
 */
export declare type NumeralDay = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;

/**
 * 数字星期转中文星期。`0` 和 `7` 都视为星期日。
 *
 * @public
 * @param day 数字的星期几
 * @returns 返回中文的星期几
 * @example
 * ```typescript
 * numeralDayToChineseDay(0) // => 日
 * numeralDayToChineseDay(1) // => 一
 * numeralDayToChineseDay(5) // => 五
 * numeralDayToChineseDay(7) // => 日
 * ```
 */
export declare function numeralDayToChineseDay(day: NumeralDay): string;

export { parse }

export { parseISO }

export { parseJSON }

export { pl }

export { previousDay }

export { previousFriday }

export { previousMonday }

export { previousSaturday }

export { previousSunday }

export { previousThursday }

export { previousTuesday }

export { previousWednesday }

export { pt }

export { ptBR }

export { quartersToMonths }

export { quartersToYears }

export { ro }

export { roundToNearestMinutes }

export { ru }

export { secondsToHours }

export { secondsToMilliseconds }

export { secondsToMinutes }

export { set }

export { setDate }

export { setDay }

export { setDayOfYear }

export { setHours }

export { setISODay }

export { setISOWeek }

export { setISOWeekYear }

export { setMilliseconds }

export { setMinutes }

export { setMonth }

export { setQuarter }

export { setSeconds }

export { setWeek }

export { setWeekYear }

export { setYear }

export { sk }

export { sl }

export { sq }

export { sr }

export { srLatn }

export { startOfDay }

export { startOfDecade }

export { startOfHour }

export { startOfISOWeek }

export { startOfISOWeekYear }

export { startOfMinute }

export { startOfMonth }

export { startOfQuarter }

export { startOfSecond }

export { startOfToday }

export { startOfTomorrow }

export { startOfWeek }

export { startOfWeekYear }

export { startOfYear }

export { startOfYesterday }

export { sub }

export { subBusinessDays }

export { subDays }

export { subHours }

export { subISOWeekYears }

export { subMilliseconds }

export { subMinutes }

export { subMonths }

export { subQuarters }

export { subSeconds }

export { subWeeks }

export { subYears }

export { sv }

export { ta }

export { te }

export { th }

export { toDate }

export { tr }

export { ug }

export { uk }

export { uz }

export { vi }

export { weeksToDays }

export { yearsToMonths }

export { yearsToQuarters }

export { zhCN }

export { zhTW }

export { }
