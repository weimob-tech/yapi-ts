"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.Wechat = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _EventBus = require("./EventBus");

var _loadResource = require("./loadResource");

var _lodashUni = require("lodash-uni");

/**
 * 微信 JSSDK 支持的分享 API 列表。
 */
var shareJsApiList = ['updateAppMessageShareData', 'updateTimelineShareData', 'onMenuShareAppMessage', 'onMenuShareTimeline', 'onMenuShareQQ', 'onMenuShareQZone'];
/**
 * 对微信 JSSDK 的封装。
 *
 * @public
 * @example
 * ```typescript
 * const wechat = new Wechat()
 * getWechatConfigAsync().then(config => {
 *   wechat.config(config)
 * })
 * wechat.updateShareData({
 *   title: '分享标题',
 *   desc: '分享描述',
 *   link: '分享链接',
 *   imgUrl: '缩略图地址',
 * })
 * wechat.invoke('scanQRCode').then(res => {
 *   // => API 调用结果
 * })
 * ```
 */

var Wechat = /*#__PURE__*/function () {
  /**
   * 微信 JSSDK 是否已准备完成。
   */

  /**
   * 消息巴士。
   */

  /**
   * 上一次设置分享时的参数。
   */

  /**
   * 注入微信 `JSSDK` 的权限验证配置参数。
   */

  /**
   * 构造函数。
   *
   * @param params 注入微信 `JSSDK` 的权限验证配置参数
   */
  function Wechat(params) {
    this.ready = false;
    this.bus = new _EventBus.EventBus();
    this.prevShareParams = {};
    this.configParams = {};

    if (params) {
      this.config(params);
    }
  }
  /**
   * 注入微信 `JSSDK` 的权限验证配置。
   *
   * @param params 配置参数
   */


  var _proto = Wechat.prototype;

  _proto.config = function config(params) {
    var _this = this;

    if (params === void 0) {
      params = this.configParams;
    }

    this.configParams = params;

    var config = function config() {
      var sharable = typeof params.sharable === 'boolean' ? params.sharable : true;
      wx.config((0, _extends2.default)({}, params, {
        jsApiList: [].concat(params.jsApiList || [], sharable ? shareJsApiList : [])
      }));

      if (!_this.ready) {
        wx.ready(function () {
          _this.ready = true;

          _this.bus.emit('ready');
        });
        wx.error(function (err) {
          _this.bus.emit('error', err);
        });
      }
    };

    if (typeof wx !== 'undefined') {
      config();
    } else {
      var autoLoadJSSDK = params.autoLoadJSSDK == null ? '1.4.0' : params.autoLoadJSSDK;

      if (autoLoadJSSDK !== false) {
        var jssdkUrl = /^[0-9.]+$/.test(autoLoadJSSDK) ? "https://res.wx.qq.com/open/js/jweixin-" + autoLoadJSSDK + ".js" : autoLoadJSSDK;
        var alternateJssdkUrl = jssdkUrl.replace(/^https:\/\/res\.wx\.qq\.com\//, 'https://res2.wx.qq.com/');
        (0, _loadResource.loadResource)({
          type: _loadResource.LoadResourceUrlType.js,
          path: jssdkUrl,
          alternatePath: alternateJssdkUrl
        }).then(function (_ref) {
          var _scriptEl$parentNode;

          var scriptEl = _ref[0];
          (_scriptEl$parentNode = scriptEl.parentNode) == null ? void 0 : _scriptEl$parentNode.removeChild(scriptEl);
        }, _lodashUni.noop).then(function () {
          if (typeof wx === 'undefined') {
            throw new Error('微信 JSSDK 加载失败');
          }

          config();
        });
      } else {
        if (typeof wx === 'undefined') {
          throw new Error('请先引入微信 JSSDK');
        }

        config();
      }
    }
  }
  /**
   * 判断当前客户端版本是否支持指定 JS 接口。
   *
   * @param jsApiList 需要检测的 JS 接口列表
   * @returns 以键值对的形式返回，可用的 `api` 值 `true`，不可用为 `false`
   */
  ;

  _proto.checkJsApi = function checkJsApi(jsApiList) {
    return this.invoke('checkJsApi', {
      jsApiList: jsApiList
    }).then(function (res) {
      return res.checkResult;
    });
  }
  /**
   * 设置分享数据。
   *
   * **注意**：每次分享的数据会和上次分享的数据合并作为最终分享的数据，因此，可以设置全局的分享数据。
   *
   * @param params 分享数据
   */
  ;

  _proto.updateShareData = function updateShareData(params) {
    var _this2 = this;

    params = (0, _extends2.default)({}, this.prevShareParams, params);
    this.prevShareParams = params;
    params = (0, _lodashUni.mapValues)(params, function (value) {
      return typeof value === 'function' ? value() : value;
    });
    return shareJsApiList.reduce(function (prev, jsApi) {
      var next = function next() {
        return _this2.invoke(jsApi, params);
      };

      return prev.then(next, next);
    }, Promise.resolve());
  }
  /**
   * 选择图片。
   *
   * @param params 参数
   * @returns 选定照片的本地 ID 列表，它们可以作为 img 标签的 src 属性显示图片
   */
  ;

  _proto.chooseImage = function chooseImage(params) {
    return this.invoke('chooseImage', params).then(function (res) {
      return res.localIds;
    });
  }
  /**
   * 预览图片。
   *
   * @param params 参数
   */
  ;

  _proto.previewImage = function previewImage(params) {
    return this.invoke('previewImage', {
      urls: params.urls,
      current: params.current || params.urls[0]
    });
  }
  /**
   * 上传图片。
   *
   * **备注：** 上传图片有效期3天，
   * 可用微信多媒体接口下载图片到自己的服务器，
   * 此处获得的服务器端 ID 即 `media_id`。
   *
   * @param params 参数
   * @returns 图片的服务器端 ID
   */
  ;

  _proto.uploadImage = function uploadImage(params) {
    return this.invoke('uploadImage', {
      localId: params.localId,
      isShowProgressTips: params.isShowProgressTips ? 1 : 0
    }).then(function (res) {
      return res.serverId;
    });
  }
  /**
   * 使用微信内置地图查看位置。
   *
   * @param params 参数
   */
  ;

  _proto.openLocation = function openLocation(params) {
    return this.invoke('openLocation', params);
  }
  /**
   * 关闭当前网页窗口。
   */
  ;

  _proto.closeWindow = function closeWindow() {
    return this.invoke('closeWindow');
  }
  /**
   * 批量隐藏非基础菜单项。
   *
   * @param menuList 要隐藏的非基础菜单项列表
   */
  ;

  _proto.hideNonBaseMenuItems = function hideNonBaseMenuItems(menuList) {
    return this.invoke('hideMenuItems', {
      menuList: menuList
    });
  }
  /**
   * 批量显示非基础菜单项。
   *
   * @param menuList 要显示的非基础菜单项列表
   */
  ;

  _proto.showNonBaseMenuItems = function showNonBaseMenuItems(menuList) {
    return this.invoke('showMenuItems', {
      menuList: menuList
    });
  }
  /**
   * 隐藏所有的非基础菜单项。
   */
  ;

  _proto.hideAllNonBaseMenuItems = function hideAllNonBaseMenuItems() {
    return this.invoke('hideAllNonBaseMenuItem');
  }
  /**
   * 显示所有的非基础菜单项。
   */
  ;

  _proto.showAllNonBaseMenuItems = function showAllNonBaseMenuItems() {
    return this.invoke('showAllNonBaseMenuItem');
  }
  /**
   * 发起微信支付。
   *
   * @param params 参数
   */
  ;

  _proto.requestPayment = function requestPayment(params) {
    return this.invoke('chooseWXPay', params);
  }
  /**
   * 错误处理。
   *
   * @param callback 出错时的回调函数
   */
  ;

  _proto.onError = function onError(callback) {
    return this.bus.on('error', callback);
  }
  /**
   * 调用 JSSDK 的 API 方法。
   *
   * @param jsApi 要调用的 API 名称
   * @param params 传给 API 的参数
   * @returns 调用结果
   */
  ;

  _proto.invoke = function invoke(jsApi, params) {
    var _this3 = this;

    if (params === void 0) {
      params = {};
    }

    return new Promise(function (resolve, reject) {
      var invoke = function invoke() {
        if (!wx[jsApi]) return reject("wx." + jsApi + " \u4E0D\u53EF\u7528");

        _this3.config();

        wx[jsApi]((0, _extends2.default)({}, params, {
          success: resolve,
          fail: reject,
          cancel: reject
        }));
      };

      if (typeof wx === 'undefined' || !_this3.ready) {
        _this3.bus.once('ready', invoke);
      } else {
        invoke();
      }
    });
  };

  return Wechat;
}();

exports.Wechat = Wechat;