import { getStorageSync, removeStorage, setStorage } from '@tarojs/taro';
import { useCallback, useState } from 'react';
import { useLatest, useUpdateEffect } from 'react-use';
export var useLocalStorage = function useLocalStorage(key, initialState) {
  var getLocalStorageItem = useCallback(function () {
    try {
      var data = getStorageSync(key);

      if (data != null) {
        return JSON.parse(data);
      }

      return initialState;
    } catch (_unused) {
      return initialState;
    }
  }, [key, initialState]);

  var _useState = useState(getLocalStorageItem),
      state = _useState[0],
      setState = _useState[1];

  var latestKey = useLatest(key);
  var latestInitialState = useLatest(initialState);
  var latestState = useLatest(state);
  useUpdateEffect(function () {
    setState(getLocalStorageItem());
  }, [key]);
  var set = useCallback(function (nextState) {
    if (typeof nextState === 'function') {
      nextState = nextState(latestState.current);
    }

    setState(nextState);
    setStorage({
      key: latestKey.current,
      data: JSON.stringify(nextState)
    });
  }, []);
  var reset = useCallback(function () {
    setState(latestInitialState.current);
    removeStorage({
      key: latestKey.current
    });
  }, []);
  return [state, set, reset];
};