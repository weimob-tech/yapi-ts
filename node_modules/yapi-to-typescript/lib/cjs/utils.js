"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.throwError = throwError;
exports.toUnixPath = toUnixPath;
exports.getNormalizedRelativePath = getNormalizedRelativePath;
exports.processJsonSchema = processJsonSchema;
exports.jsonSchemaStringToJsonSchema = jsonSchemaStringToJsonSchema;
exports.jsonToJsonSchema = jsonToJsonSchema;
exports.mockjsTemplateToJsonSchema = mockjsTemplateToJsonSchema;
exports.propDefinitionsToJsonSchema = propDefinitionsToJsonSchema;
exports.jsonSchemaToType = jsonSchemaToType;
exports.getRequestDataJsonSchema = getRequestDataJsonSchema;
exports.getResponseDataJsonSchema = getResponseDataJsonSchema;
exports.reachJsonSchema = reachJsonSchema;
exports.sortByWeights = sortByWeights;
exports.isGetLikeMethod = isGetLikeMethod;
exports.isPostLikeMethod = isPostLikeMethod;
exports.getPrettierOptions = getPrettierOptions;
exports.getCachedPrettierOptions = void 0;

var _json = _interopRequireDefault(require("json5"));

var _mockjs = _interopRequireDefault(require("mockjs"));

var _path = _interopRequireDefault(require("path"));

var _prettier = _interopRequireDefault(require("prettier"));

var _toJsonSchema = _interopRequireDefault(require("to-json-schema"));

var _vtils = require("vtils");

var _jsonSchemaToTypescript = require("json-schema-to-typescript");

var _helpers = require("./helpers");

var _types = require("./types");

/**
 * 抛出错误。
 *
 * @param msg 错误信息
 */
function throwError(...msg) {
  /* istanbul ignore next */
  throw new Error(msg.join(''));
}
/**
 * 将路径统一为 unix 风格的路径。
 *
 * @param path 路径
 * @returns unix 风格的路径
 */


function toUnixPath(path) {
  return path.replace(/[/\\]+/g, '/');
}
/**
 * 获得规范化的相对路径。
 *
 * @param from 来源路径
 * @param to 去向路径
 * @returns 相对路径
 */


function getNormalizedRelativePath(from, to) {
  return toUnixPath(_path.default.relative(_path.default.dirname(from), to)).replace(/^(?=[^.])/, './').replace(/\.(ts|js)x?$/i, '');
}
/**
 * 原地处理 JSONSchema。
 *
 * @param jsonSchema 待处理的 JSONSchema
 * @returns 处理后的 JSONSchema
 */


function processJsonSchema(jsonSchema, customTypeMapping) {
  /* istanbul ignore if */
  if (!(0, _vtils.isObject)(jsonSchema)) return jsonSchema; // 去除 title 和 id，防止 json-schema-to-typescript 提取它们作为接口名

  delete jsonSchema.title;
  delete jsonSchema.id; // 忽略数组长度限制

  delete jsonSchema.minItems;
  delete jsonSchema.maxItems;

  if (jsonSchema.type === 'object') {
    // 将 additionalProperties 设为 false
    jsonSchema.additionalProperties = false;
  } // 删除通过 swagger 导入时未剔除的 ref


  delete jsonSchema.$ref;
  delete jsonSchema.$$ref; // 删除 default，防止 json-schema-to-typescript 根据它推测类型

  delete jsonSchema.default; // 处理类型名称为标准的 JSONSchema 类型名称

  if (jsonSchema.type) {
    // 类型映射表，键都为小写
    const typeMapping = {
      byte: 'integer',
      short: 'integer',
      int: 'integer',
      long: 'integer',
      float: 'number',
      double: 'number',
      bigdecimal: 'number',
      char: 'string',
      void: 'null',
      ...(0, _vtils.mapKeys)(customTypeMapping, (_, key) => key.toLowerCase())
    };
    const isMultiple = Array.isArray(jsonSchema.type);
    const types = (0, _vtils.castArray)(jsonSchema.type).map(type => {
      // 所有类型转成小写，如：String -> string
      type = type.toLowerCase(); // 映射为标准的 JSONSchema 类型

      type = typeMapping[type] || type;
      return type;
    });
    jsonSchema.type = isMultiple ? types : types[0];
  } // Mock.toJSONSchema 产生的 properties 为数组，然而 JSONSchema4 的 properties 为对象


  if ((0, _vtils.isArray)(jsonSchema.properties)) {
    jsonSchema.properties = jsonSchema.properties.reduce((props, js) => {
      props[js.name] = js;
      return props;
    }, {});
  } // 移除字段名称首尾空格


  if (jsonSchema.properties) {
    (0, _vtils.forOwn)(jsonSchema.properties, (_, prop) => {
      const propDef = jsonSchema.properties[prop];
      delete jsonSchema.properties[prop];
      jsonSchema.properties[prop.trim()] = propDef;
    });
    jsonSchema.required = jsonSchema.required && jsonSchema.required.map(prop => prop.trim());
  } // 继续处理对象的子元素


  if (jsonSchema.properties) {
    (0, _vtils.forOwn)(jsonSchema.properties, item => processJsonSchema(item, customTypeMapping));
  } // 继续处理数组的子元素


  if (jsonSchema.items) {
    (0, _vtils.castArray)(jsonSchema.items).forEach(item => processJsonSchema(item, customTypeMapping));
  } // 处理 oneOf


  if (jsonSchema.oneOf) {
    jsonSchema.oneOf.forEach(item => processJsonSchema(item, customTypeMapping));
  } // 处理 anyOf


  if (jsonSchema.anyOf) {
    jsonSchema.anyOf.forEach(item => processJsonSchema(item, customTypeMapping));
  } // 处理 allOf


  if (jsonSchema.allOf) {
    jsonSchema.allOf.forEach(item => processJsonSchema(item, customTypeMapping));
  }

  return jsonSchema;
}
/**
 * 将 JSONSchema 字符串转为 JSONSchema 对象。
 *
 * @param str 要转换的 JSONSchema 字符串
 * @returns 转换后的 JSONSchema 对象
 */


function jsonSchemaStringToJsonSchema(str, customTypeMapping) {
  return processJsonSchema(JSON.parse(str), customTypeMapping);
}
/**
 * 获得 JSON 数据的 JSONSchema 对象。
 *
 * @param json JSON 数据
 * @returns JSONSchema 对象
 */


function jsonToJsonSchema(json, customTypeMapping) {
  const schema = (0, _toJsonSchema.default)(json, {
    required: false,
    arrays: {
      mode: 'first'
    },
    objects: {
      additionalProperties: false
    },
    strings: {
      detectFormat: false
    },
    postProcessFnc: (type, schema, value) => {
      if (!schema.description && !!value && type !== 'object') {
        schema.description = JSON.stringify(value);
      }

      return schema;
    }
  });
  delete schema.description;
  return processJsonSchema(schema, customTypeMapping);
}
/**
 * 获得 mockjs 模板的 JSONSchema 对象。
 *
 * @param template mockjs 模板
 * @returns JSONSchema 对象
 */


function mockjsTemplateToJsonSchema(template, customTypeMapping) {
  return processJsonSchema(_mockjs.default.toJSONSchema(template), customTypeMapping);
}
/**
 * 获得属性定义列表的 JSONSchema 对象。
 *
 * @param propDefinitions 属性定义列表
 * @returns JSONSchema 对象
 */


function propDefinitionsToJsonSchema(propDefinitions, customTypeMapping) {
  return processJsonSchema({
    type: 'object',
    required: propDefinitions.reduce((res, prop) => {
      if (prop.required) {
        res.push(prop.name);
      }

      return res;
    }, []),
    properties: propDefinitions.reduce((res, prop) => {
      res[prop.name] = {
        type: prop.type,
        description: prop.comment,
        ...(prop.type === 'file' ? {
          tsType: _helpers.FileData.name
        } : {})
      };
      return res;
    }, {})
  }, customTypeMapping);
}

const JSTTOptions = {
  bannerComment: '',
  style: {
    bracketSpacing: false,
    printWidth: 120,
    semi: true,
    singleQuote: true,
    tabWidth: 2,
    trailingComma: 'none',
    useTabs: false
  }
};
/**
 * 根据 JSONSchema 对象生产 TypeScript 类型定义。
 *
 * @param jsonSchema JSONSchema 对象
 * @param typeName 类型名称
 * @returns TypeScript 类型定义
 */

async function jsonSchemaToType(jsonSchema, typeName) {
  if ((0, _vtils.isEmpty)(jsonSchema)) {
    return `export interface ${typeName} {}`;
  }

  if (jsonSchema.__is_any__) {
    delete jsonSchema.__is_any__;
    return `export type ${typeName} = any`;
  } // JSTT 会转换 typeName，因此传入一个全大写的假 typeName，生成代码后再替换回真正的 typeName


  const fakeTypeName = 'THISISAFAKETYPENAME';
  const code = await (0, _jsonSchemaToTypescript.compile)( // 去除最外层的 description 以防止 JSTT 提取它作为类型的注释
  (0, _vtils.omit)(jsonSchema, ['description']), fakeTypeName, JSTTOptions);
  delete jsonSchema.id;
  return code.replace(fakeTypeName, typeName).trim();
}

function getRequestDataJsonSchema(interfaceInfo, customTypeMapping) {
  let jsonSchema; // 处理表单数据（仅 POST 类接口）

  if (isPostLikeMethod(interfaceInfo.method)) {
    switch (interfaceInfo.req_body_type) {
      case _types.RequestBodyType.form:
        jsonSchema = propDefinitionsToJsonSchema(interfaceInfo.req_body_form.map(item => ({
          name: item.name,
          required: item.required === _types.Required.true,
          type: item.type === _types.RequestFormItemType.file ? 'file' : 'string',
          comment: item.desc
        })), customTypeMapping);
        break;

      case _types.RequestBodyType.json:
        if (interfaceInfo.req_body_other) {
          jsonSchema = interfaceInfo.req_body_is_json_schema ? jsonSchemaStringToJsonSchema(interfaceInfo.req_body_other, customTypeMapping) : jsonToJsonSchema(_json.default.parse(interfaceInfo.req_body_other), customTypeMapping);
        }

        break;

      default:
        /* istanbul ignore next */
        break;
    }
  } // 处理查询数据


  if ((0, _vtils.isArray)(interfaceInfo.req_query) && interfaceInfo.req_query.length) {
    const queryJsonSchema = propDefinitionsToJsonSchema(interfaceInfo.req_query.map(item => ({
      name: item.name,
      required: item.required === _types.Required.true,
      type: item.type || 'string',
      comment: item.desc
    })), customTypeMapping);
    /* istanbul ignore else */

    if (jsonSchema) {
      jsonSchema.properties = { ...jsonSchema.properties,
        ...queryJsonSchema.properties
      };
      jsonSchema.required = [...(jsonSchema.required || []), ...(queryJsonSchema.required || [])];
    } else {
      jsonSchema = queryJsonSchema;
    }
  } // 处理路径参数


  if ((0, _vtils.isArray)(interfaceInfo.req_params) && interfaceInfo.req_params.length) {
    const paramsJsonSchema = propDefinitionsToJsonSchema(interfaceInfo.req_params.map(item => ({
      name: item.name,
      required: true,
      type: item.type || 'string',
      comment: item.desc
    })), customTypeMapping);
    /* istanbul ignore else */

    if (jsonSchema) {
      jsonSchema.properties = { ...jsonSchema.properties,
        ...paramsJsonSchema.properties
      };
      jsonSchema.required = [...(jsonSchema.required || []), ...(paramsJsonSchema.required || [])];
    } else {
      jsonSchema = paramsJsonSchema;
    }
  }

  return jsonSchema || {};
}

function getResponseDataJsonSchema(interfaceInfo, customTypeMapping, dataKey) {
  let jsonSchema = {};

  switch (interfaceInfo.res_body_type) {
    case _types.ResponseBodyType.json:
      if (interfaceInfo.res_body) {
        jsonSchema = interfaceInfo.res_body_is_json_schema ? jsonSchemaStringToJsonSchema(interfaceInfo.res_body, customTypeMapping) : mockjsTemplateToJsonSchema(_json.default.parse(interfaceInfo.res_body), customTypeMapping);
      }

      break;

    default:
      jsonSchema = {
        __is_any__: true
      };
      break;
  }

  if (dataKey && jsonSchema) {
    jsonSchema = reachJsonSchema(jsonSchema, dataKey);
  }

  return jsonSchema;
}

function reachJsonSchema(jsonSchema, path) {
  let last = jsonSchema;

  for (const segment of (0, _vtils.castArray)(path)) {
    var _last$properties;

    const _last = (_last$properties = last.properties) == null ? void 0 : _last$properties[segment];

    if (!_last) {
      return jsonSchema;
    }

    last = _last;
  }

  return last;
}

function sortByWeights(list) {
  list.sort((a, b) => {
    const x = a.weights.length > b.weights.length ? b : a;
    const minLen = Math.min(a.weights.length, b.weights.length);
    const maxLen = Math.max(a.weights.length, b.weights.length);
    x.weights.push(...new Array(maxLen - minLen).fill(0));
    const w = a.weights.reduce((w, _, i) => {
      if (w === 0) {
        w = a.weights[i] - b.weights[i];
      }

      return w;
    }, 0);
    return w;
  });
  return list;
}

function isGetLikeMethod(method) {
  return method === _types.Method.GET || method === _types.Method.OPTIONS || method === _types.Method.HEAD;
}

function isPostLikeMethod(method) {
  return !isGetLikeMethod(method);
}

async function getPrettierOptions() {
  const prettierOptions = {
    parser: 'typescript',
    printWidth: 120,
    tabWidth: 2,
    singleQuote: true,
    semi: false,
    trailingComma: 'all',
    bracketSpacing: false,
    endOfLine: 'lf'
  }; // 测试时跳过本地配置的解析

  if (process.env.JEST_WORKER_ID) {
    return prettierOptions;
  }

  const [prettierConfigPathErr, prettierConfigPath] = await (0, _vtils.run)(() => _prettier.default.resolveConfigFile());

  if (prettierConfigPathErr || !prettierConfigPath) {
    return prettierOptions;
  }

  const [prettierConfigErr, prettierConfig] = await (0, _vtils.run)(() => _prettier.default.resolveConfig(prettierConfigPath));

  if (prettierConfigErr || !prettierConfig) {
    return prettierOptions;
  }

  return { ...prettierOptions,
    ...prettierConfig,
    parser: 'typescript'
  };
}

const getCachedPrettierOptions = (0, _vtils.memoize)(getPrettierOptions);
exports.getCachedPrettierOptions = getCachedPrettierOptions;