"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.Generator = void 0;

var changeCase = _interopRequireWildcard(require("change-case"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _got = _interopRequireDefault(require("got"));

var _path = _interopRequireDefault(require("path"));

var _prettier = _interopRequireDefault(require("prettier"));

var _vtils = require("vtils");

var _types = require("./types");

var _child_process = require("child_process");

var _utils = require("./utils");

var _SwaggerToYApiServer = require("./SwaggerToYApiServer");

class Generator {
  /** 配置 */
  constructor(config, options = {
    cwd: process.cwd()
  }) {
    this.options = options;
    this.config = [];
    this.disposes = [];
    this.fetchProject = (0, _vtils.memoize)(async ({
      serverUrl,
      token
    }) => {
      const projectInfo = await this.fetchApi(`${serverUrl}/api/project/get`, {
        token: token
      });
      const basePath = `/${projectInfo.basepath || '/'}`.replace(/\/+$/, '').replace(/^\/+/, '/');
      projectInfo.basepath = basePath;
      return projectInfo;
    }, ({
      serverUrl,
      token
    }) => `${serverUrl}|${token}`);
    this.fetchExport = (0, _vtils.memoize)(async ({
      serverUrl,
      token
    }) => {
      const projectInfo = await this.fetchProject({
        serverUrl,
        token
      });
      const categoryList = await this.fetchApi(`${serverUrl}/api/plugin/export`, {
        type: 'json',
        status: 'all',
        isWiki: 'false',
        token: token
      });
      return categoryList.map(cat => {
        cat.list = (cat.list || []).map(item => {
          item.path = `${projectInfo.basepath}${item.path}`;
          return item;
        });
        return cat;
      });
    }, ({
      serverUrl,
      token
    }) => `${serverUrl}|${token}`);
    // config 可能是对象或数组，统一为数组
    this.config = (0, _vtils.castArray)(config);
  }

  async prepare() {
    this.config = await Promise.all( // config 可能是对象或数组，统一为数组
    this.config.map(async item => {
      if (item.serverType === 'swagger') {
        const swaggerToYApiServer = new _SwaggerToYApiServer.SwaggerToYApiServer({
          swaggerJsonUrl: item.serverUrl
        });
        item.serverUrl = await swaggerToYApiServer.start();
        this.disposes.push(() => swaggerToYApiServer.stop());
      }

      if (item.serverUrl) {
        // 去除地址后面的 /
        // fix: https://github.com/fjc0k/yapi-to-typescript/issues/22
        item.serverUrl = item.serverUrl.replace(/\/+$/, '');
      }

      return item;
    }));
  }

  async generate() {
    const outputFileList = Object.create(null);
    await Promise.all(this.config.map(async (serverConfig, serverIndex) => {
      const projects = serverConfig.projects.reduce((projects, project) => {
        projects.push(...(0, _vtils.castArray)(project.token).map(token => ({ ...project,
          token: token
        })));
        return projects;
      }, []);
      return Promise.all(projects.map(async (projectConfig, projectIndex) => {
        const projectInfo = await this.fetchProjectInfo({ ...serverConfig,
          ...projectConfig
        });
        await Promise.all(projectConfig.categories.map(async (categoryConfig, categoryIndex) => {
          // 分类处理
          // 数组化
          let categoryIds = (0, _vtils.castArray)(categoryConfig.id); // 全部分类

          if (categoryIds.includes(0)) {
            categoryIds.push(...projectInfo.cats.map(cat => cat._id));
          } // 唯一化


          categoryIds = (0, _vtils.uniq)(categoryIds); // 去掉被排除的分类

          const excludedCategoryIds = categoryIds.filter(id => id < 0).map(Math.abs);
          categoryIds = categoryIds.filter(id => !excludedCategoryIds.includes(Math.abs(id))); // 删除不存在的分类

          categoryIds = categoryIds.filter(id => !!projectInfo.cats.find(cat => cat._id === id)); // 顺序化

          categoryIds = categoryIds.sort();
          const codes = (await Promise.all(categoryIds.map(async (id, categoryIndex2) => {
            categoryConfig = { ...categoryConfig,
              id: id
            };
            const syntheticalConfig = { ...serverConfig,
              ...projectConfig,
              ...categoryConfig,
              mockUrl: projectInfo.getMockUrl()
            };
            syntheticalConfig.target = syntheticalConfig.target || 'typescript';
            syntheticalConfig.devUrl = projectInfo.getDevUrl(syntheticalConfig.devEnvName);
            syntheticalConfig.prodUrl = projectInfo.getProdUrl(syntheticalConfig.prodEnvName); // 接口列表

            let interfaceList = await this.fetchInterfaceList(syntheticalConfig);
            interfaceList = interfaceList.map(interfaceInfo => {
              // 实现 _project 字段
              interfaceInfo._project = (0, _vtils.omit)(projectInfo, ['cats', 'getMockUrl', 'getDevUrl', 'getProdUrl']); // 预处理

              const _interfaceInfo = (0, _vtils.isFunction)(syntheticalConfig.preproccessInterface) ? syntheticalConfig.preproccessInterface((0, _vtils.cloneDeepFast)(interfaceInfo), changeCase) : interfaceInfo;

              return _interfaceInfo;
            }).filter(Boolean);
            interfaceList.sort((a, b) => a._id - b._id);
            const interfaceCodes = await Promise.all(interfaceList.map(async interfaceInfo => {
              const outputFilePath = _path.default.resolve(this.options.cwd, typeof syntheticalConfig.outputFilePath === 'function' ? syntheticalConfig.outputFilePath(interfaceInfo, changeCase) : syntheticalConfig.outputFilePath);

              const categoryUID = `_${serverIndex}_${projectIndex}_${categoryIndex}_${categoryIndex2}`;
              const code = await this.generateInterfaceCode(syntheticalConfig, interfaceInfo, categoryUID);
              const weights = [serverIndex, projectIndex, categoryIndex, categoryIndex2];
              return {
                categoryUID,
                outputFilePath,
                weights,
                code
              };
            }));
            const groupedInterfaceCodes = (0, _vtils.groupBy)(interfaceCodes, item => item.outputFilePath);
            return Object.keys(groupedInterfaceCodes).map(outputFilePath => {
              const categoryCode = [...(0, _vtils.uniq)((0, _utils.sortByWeights)(groupedInterfaceCodes[outputFilePath]).map(item => item.categoryUID)).map(categoryUID => syntheticalConfig.typesOnly ? '' : (0, _vtils.dedent)`
                                      const mockUrl${categoryUID} = ${JSON.stringify(syntheticalConfig.mockUrl)} as any
                                      const devUrl${categoryUID} = ${JSON.stringify(syntheticalConfig.devUrl)} as any
                                      const prodUrl${categoryUID} = ${JSON.stringify(syntheticalConfig.prodUrl)} as any
                                      const dataKey${categoryUID} = ${JSON.stringify(syntheticalConfig.dataKey)} as any
                                    `), ...(0, _utils.sortByWeights)(groupedInterfaceCodes[outputFilePath]).map(item => item.code)].filter(Boolean).join('\n\n');

              if (!outputFileList[outputFilePath]) {
                outputFileList[outputFilePath] = {
                  syntheticalConfig,
                  content: [],
                  requestFunctionFilePath: syntheticalConfig.requestFunctionFilePath ? _path.default.resolve(this.options.cwd, syntheticalConfig.requestFunctionFilePath) : _path.default.join(_path.default.dirname(outputFilePath), 'request.ts'),
                  requestHookMakerFilePath: syntheticalConfig.reactHooks && syntheticalConfig.reactHooks.enabled ? syntheticalConfig.reactHooks.requestHookMakerFilePath ? _path.default.resolve(this.options.cwd, syntheticalConfig.reactHooks.requestHookMakerFilePath) : _path.default.join(_path.default.dirname(outputFilePath), 'makeRequestHook.ts') : ''
                };
              }

              return {
                outputFilePath: outputFilePath,
                code: categoryCode,
                weights: (0, _vtils.last)((0, _utils.sortByWeights)(groupedInterfaceCodes[outputFilePath])).weights
              };
            });
          }))).flat();

          for (const groupedCodes of (0, _vtils.values)((0, _vtils.groupBy)(codes, item => item.outputFilePath))) {
            (0, _utils.sortByWeights)(groupedCodes);
            outputFileList[groupedCodes[0].outputFilePath].content.push(...groupedCodes.map(item => item.code));
          }
        }));
      }));
    }));
    return outputFileList;
  }

  async write(outputFileList) {
    return Promise.all(Object.keys(outputFileList).map(async outputFilePath => {
      let {
        // eslint-disable-next-line prefer-const
        content,
        requestFunctionFilePath,
        requestHookMakerFilePath,
        // eslint-disable-next-line prefer-const
        syntheticalConfig
      } = outputFileList[outputFilePath];
      const rawRequestFunctionFilePath = requestFunctionFilePath;
      const rawRequestHookMakerFilePath = requestHookMakerFilePath; // 支持 .jsx? 后缀

      outputFilePath = outputFilePath.replace(/\.js(x)?$/, '.ts$1');
      requestFunctionFilePath = requestFunctionFilePath.replace(/\.js(x)?$/, '.ts$1');
      requestHookMakerFilePath = requestHookMakerFilePath.replace(/\.js(x)?$/, '.ts$1');

      if (!syntheticalConfig.typesOnly) {
        if (!(await _fsExtra.default.pathExists(rawRequestFunctionFilePath))) {
          await _fsExtra.default.outputFile(requestFunctionFilePath, (0, _vtils.dedent)`
                import { RequestFunctionParams } from 'yapi-to-typescript'

                export interface RequestOptions {
                  /**
                   * 使用的服务器。
                   *
                   * - \`prod\`: 生产服务器
                   * - \`dev\`: 测试服务器
                   * - \`mock\`: 模拟服务器
                   *
                   * @default prod
                   */
                  server?: 'prod' | 'dev' | 'mock',
                }

                export default function request<TResponseData>(
                  payload: RequestFunctionParams,
                  options: RequestOptions = {
                    server: 'prod',
                  },
                ): Promise<TResponseData> {
                  return new Promise<TResponseData>((resolve, reject) => {
                    // 基本地址
                    const baseUrl = options.server === 'mock'
                      ? payload.mockUrl
                      : options.server === 'dev'
                        ? payload.devUrl
                        : payload.prodUrl

                    // 请求地址
                    const url = \`\${baseUrl}\${payload.path}\`

                    // 具体请求逻辑
                  })
                }
              `);
        }

        if (syntheticalConfig.reactHooks && syntheticalConfig.reactHooks.enabled && !(await _fsExtra.default.pathExists(rawRequestHookMakerFilePath))) {
          await _fsExtra.default.outputFile(requestHookMakerFilePath, (0, _vtils.dedent)`
                import { useState, useEffect } from 'react'
                import { RequestConfig } from 'yapi-to-typescript'
                import { Request } from ${JSON.stringify((0, _utils.getNormalizedRelativePath)(requestHookMakerFilePath, outputFilePath))}
                import baseRequest from ${JSON.stringify((0, _utils.getNormalizedRelativePath)(requestHookMakerFilePath, requestFunctionFilePath))}

                export default function makeRequestHook<TRequestData, TRequestConfig extends RequestConfig, TRequestResult extends ReturnType<typeof baseRequest>>(request: Request<TRequestData, TRequestConfig, TRequestResult>) {
                  type Data = TRequestResult extends Promise<infer R> ? R : TRequestResult
                  return function useRequest(requestData: TRequestData) {
                    // 一个简单的 Hook 实现，实际项目可结合其他库使用，比如：
                    // @umijs/hooks 的 useRequest (https://github.com/umijs/hooks)
                    // swr (https://github.com/zeit/swr)

                    const [loading, setLoading] = useState(true)
                    const [data, setData] = useState<Data>()

                    useEffect(() => {
                      request(requestData).then(data => {
                        setLoading(false)
                        setData(data as any)
                      })
                    }, [JSON.stringify(requestData)])

                    return {
                      loading,
                      data,
                    }
                  }
                }
              `);
        }
      } // 始终写入主文件


      const rawOutputContent = (0, _vtils.dedent)`
          /* tslint:disable */
          /* eslint-disable */

          /* 该文件由 yapi-to-typescript 自动生成，请勿直接修改！！！ */

          ${syntheticalConfig.typesOnly ? (0, _vtils.dedent)`
                // @ts-ignore
                type FileData = File

                ${content.join('\n\n').trim()}
              ` : (0, _vtils.dedent)`
                // @ts-ignore
                // prettier-ignore
                import { Method, RequestBodyType, ResponseBodyType, RequestConfig, RequestFunctionRestArgs, FileData, prepare } from 'yapi-to-typescript'
                // @ts-ignore
                import request from ${JSON.stringify((0, _utils.getNormalizedRelativePath)(outputFilePath, requestFunctionFilePath))}
                ${!syntheticalConfig.reactHooks || !syntheticalConfig.reactHooks.enabled ? '' : (0, _vtils.dedent)`
                      // @ts-ignore
                      import makeRequestHook from ${JSON.stringify((0, _utils.getNormalizedRelativePath)(outputFilePath, requestHookMakerFilePath))}
                    `}

                type UserRequestRestArgs = RequestFunctionRestArgs<typeof request>

                // Request: 目前 React Hooks 功能有用到
                export type Request<TRequestData, TRequestConfig extends RequestConfig, TRequestResult> = (
                  TRequestConfig['requestDataOptional'] extends true
                    ? (requestData?: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
                    : (requestData: TRequestData, ...args: RequestFunctionRestArgs<typeof request>) => TRequestResult
                ) & {
                  requestConfig: TRequestConfig
                }

                ${content.join('\n\n').trim()}
              `}
        `; // ref: https://prettier.io/docs/en/options.html

      const prettyOutputContent = _prettier.default.format(rawOutputContent, { ...(await (0, _utils.getCachedPrettierOptions)()),
        filepath: outputFilePath
      });

      const outputContent = `${(0, _vtils.dedent)`
          /* prettier-ignore-start */
          ${prettyOutputContent}
          /* prettier-ignore-end */
        `}\n`;
      await _fsExtra.default.outputFile(outputFilePath, outputContent); // 如果要生成 JavaScript 代码，
      // 则先对主文件进行 tsc 编译，主文件引用到的其他文件也会被编译，
      // 然后，删除原始的 .tsx? 文件。

      if (syntheticalConfig.target === 'javascript') {
        await this.tsc(outputFilePath);
        await Promise.all([_fsExtra.default.remove(requestFunctionFilePath).catch(_vtils.noop), _fsExtra.default.remove(requestHookMakerFilePath).catch(_vtils.noop), _fsExtra.default.remove(outputFilePath).catch(_vtils.noop)]);
      }
    }));
  }

  async tsc(file) {
    return new Promise(resolve => {
      // add this to fix bug that not-generator-file-on-window
      const command = `${require('os').platform() === 'win32' ? 'node ' : ''}${require.resolve(`typescript/bin/tsc`)}`;
      (0, _child_process.exec)(`${command} --target ES2019 --module ESNext --jsx preserve --declaration --esModuleInterop ${file}`, {
        cwd: this.options.cwd,
        env: process.env
      }, () => resolve());
    });
  }

  async fetchApi(url, query) {
    const {
      body: res
    } = await _got.default.get(url, {
      searchParams: query,
      responseType: 'json',
      https: {
        rejectUnauthorized: false
      }
    });
    /* istanbul ignore next */

    if (res && res.errcode) {
      (0, _utils.throwError)(res.errmsg);
    }

    return res.data || res;
  }

  /** 获取分类的接口列表 */
  async fetchInterfaceList({
    serverUrl,
    token,
    id
  }) {
    const category = ((await this.fetchExport({
      serverUrl,
      token
    })) || []).find(cat => !(0, _vtils.isEmpty)(cat) && !(0, _vtils.isEmpty)(cat.list) && cat.list[0].catid === id);

    if (category) {
      category.list.forEach(interfaceInfo => {
        // 实现 _category 字段
        interfaceInfo._category = (0, _vtils.omit)(category, ['list']);
      });
    }

    return category ? category.list : [];
  }
  /** 获取项目信息 */


  async fetchProjectInfo(syntheticalConfig) {
    const projectInfo = await this.fetchProject(syntheticalConfig);
    const projectCats = await this.fetchApi(`${syntheticalConfig.serverUrl}/api/interface/getCatMenu`, {
      token: syntheticalConfig.token,
      project_id: projectInfo._id
    });
    return { ...projectInfo,
      cats: projectCats,
      getMockUrl: () => `${syntheticalConfig.serverUrl}/mock/${projectInfo._id}`,
      getDevUrl: devEnvName => {
        const env = projectInfo.env.find(e => e.name === devEnvName);
        return env && env.domain ||
        /* istanbul ignore next */
        '';
      },
      getProdUrl: prodEnvName => {
        const env = projectInfo.env.find(e => e.name === prodEnvName);
        return env && env.domain ||
        /* istanbul ignore next */
        '';
      }
    };
  }
  /** 生成接口代码 */


  async generateInterfaceCode(syntheticalConfig, interfaceInfo, categoryUID) {
    var _syntheticalConfig$js, _syntheticalConfig$js2, _syntheticalConfig$js3, _syntheticalConfig$js4;

    const extendedInterfaceInfo = { ...interfaceInfo,
      parsedPath: _path.default.parse(interfaceInfo.path)
    };
    const requestFunctionName = (0, _vtils.isFunction)(syntheticalConfig.getRequestFunctionName) ? await syntheticalConfig.getRequestFunctionName(extendedInterfaceInfo, changeCase) : changeCase.camelCase(extendedInterfaceInfo.parsedPath.name);
    const requestConfigName = changeCase.camelCase(`${requestFunctionName}RequestConfig`);
    const requestConfigTypeName = changeCase.pascalCase(requestConfigName);
    const requestDataTypeName = (0, _vtils.isFunction)(syntheticalConfig.getRequestDataTypeName) ? await syntheticalConfig.getRequestDataTypeName(extendedInterfaceInfo, changeCase) : changeCase.pascalCase(`${requestFunctionName}Request`);
    const responseDataTypeName = (0, _vtils.isFunction)(syntheticalConfig.getResponseDataTypeName) ? await syntheticalConfig.getResponseDataTypeName(extendedInterfaceInfo, changeCase) : changeCase.pascalCase(`${requestFunctionName}Response`);
    const requestDataJsonSchema = (0, _utils.getRequestDataJsonSchema)(extendedInterfaceInfo, syntheticalConfig.customTypeMapping || {});
    const requestDataType = await (0, _utils.jsonSchemaToType)(requestDataJsonSchema, requestDataTypeName);
    const responseDataJsonSchema = (0, _utils.getResponseDataJsonSchema)(extendedInterfaceInfo, syntheticalConfig.customTypeMapping || {}, syntheticalConfig.dataKey);
    const responseDataType = await (0, _utils.jsonSchemaToType)(responseDataJsonSchema, responseDataTypeName);
    const isRequestDataOptional = /(\{\}|any)$/s.test(requestDataType);
    const requestHookName = syntheticalConfig.reactHooks && syntheticalConfig.reactHooks.enabled ? (0, _vtils.isFunction)(syntheticalConfig.reactHooks.getRequestHookName) ?
    /* istanbul ignore next */
    await syntheticalConfig.reactHooks.getRequestHookName(extendedInterfaceInfo, changeCase) : `use${changeCase.pascalCase(requestFunctionName)}` : ''; // 支持路径参数

    const paramNames = (extendedInterfaceInfo.req_params
    /* istanbul ignore next */
    || []).map(item => item.name);
    const paramNamesLiteral = JSON.stringify(paramNames);
    const paramNameType = paramNames.length === 0 ? 'string' : `'${paramNames.join("' | '")}'`; // 支持查询参数

    const queryNames = (extendedInterfaceInfo.req_query
    /* istanbul ignore next */
    || []).map(item => item.name);
    const queryNamesLiteral = JSON.stringify(queryNames);
    const queryNameType = queryNames.length === 0 ? 'string' : `'${queryNames.join("' | '")}'`; // 接口注释

    const genComment = genTitle => {
      const {
        enabled: isEnabled = true,
        title: hasTitle = true,
        category: hasCategory = true,
        tag: hasTag = true,
        requestHeader: hasRequestHeader = true,
        updateTime: hasUpdateTime = true,
        link: hasLink = true,
        extraTags
      } = { ...syntheticalConfig.comment,
        // Swagger 时总是禁用标签、更新时间、链接
        ...(syntheticalConfig.serverType === 'swagger' ? {
          tag: false,
          updateTime: false,
          link: false
        } : {})
      };

      if (!isEnabled) {
        return '';
      } // 转义标题中的 /


      const escapedTitle = String(extendedInterfaceInfo.title).replace(/\//g, '\\/');
      const description = hasLink ? `[${escapedTitle}↗](${syntheticalConfig.serverUrl}/project/${extendedInterfaceInfo.project_id}/interface/api/${extendedInterfaceInfo._id})` : escapedTitle;
      const summary = [hasCategory && {
        label: '分类',
        value: hasLink ? `[${extendedInterfaceInfo._category.name}↗](${syntheticalConfig.serverUrl}/project/${extendedInterfaceInfo.project_id}/interface/api/cat_${extendedInterfaceInfo.catid})` : extendedInterfaceInfo._category.name
      }, hasTag && {
        label: '标签',
        value: extendedInterfaceInfo.tag.map(tag => `\`${tag}\``)
      }, hasRequestHeader && {
        label: '请求头',
        value: `\`${extendedInterfaceInfo.method.toUpperCase()} ${extendedInterfaceInfo.path}\``
      }, hasUpdateTime && {
        label: '更新时间',
        value: process.env.JEST_WORKER_ID // 测试时使用 unix 时间戳
        ? String(extendedInterfaceInfo.up_time) :
        /* istanbul ignore next */
        `\`${(0, _dayjs.default)(extendedInterfaceInfo.up_time * 1000).format('YYYY-MM-DD HH:mm:ss')}\``
      }];

      if (typeof extraTags === 'function') {
        const tags = extraTags(extendedInterfaceInfo);

        for (const tag of tags) {
          ;
          (tag.position === 'start' ? summary.unshift : summary.push).call(summary, {
            label: tag.name,
            value: tag.value
          });
        }
      }

      const titleComment = hasTitle ? (0, _vtils.dedent)`
            * ${genTitle(description)}
            *
          ` : '';
      const extraComment = summary.filter(item => typeof item !== 'boolean' && !(0, _vtils.isEmpty)(item.value)).map(item => {
        const _item = item;
        return `* @${_item.label} ${(0, _vtils.castArray)(_item.value).join(', ')}`;
      }).join('\n');
      return (0, _vtils.dedent)`
        /**
         ${[titleComment, extraComment].filter(Boolean).join('\n')}
         */
      `;
    };

    return (0, _vtils.dedent)`
      ${genComment(title => `接口 ${title} 的 **请求类型**`)}
      ${requestDataType.trim()}

      ${genComment(title => `接口 ${title} 的 **返回类型**`)}
      ${responseDataType.trim()}

      ${syntheticalConfig.typesOnly ? '' : (0, _vtils.dedent)`
            ${genComment(title => `接口 ${title} 的 **请求配置的类型**`)}
            type ${requestConfigTypeName} = Readonly<RequestConfig<
              ${JSON.stringify(syntheticalConfig.mockUrl)},
              ${JSON.stringify(syntheticalConfig.devUrl)},
              ${JSON.stringify(syntheticalConfig.prodUrl)},
              ${JSON.stringify(extendedInterfaceInfo.path)},
              ${JSON.stringify(syntheticalConfig.dataKey) || 'undefined'},
              ${paramNameType},
              ${queryNameType},
              ${JSON.stringify(isRequestDataOptional)}
            >>

            ${genComment(title => `接口 ${title} 的 **请求配置**`)}
            const ${requestConfigName}: ${requestConfigTypeName} = {
              mockUrl: mockUrl${categoryUID},
              devUrl: devUrl${categoryUID},
              prodUrl: prodUrl${categoryUID},
              path: ${JSON.stringify(extendedInterfaceInfo.path)},
              method: Method.${extendedInterfaceInfo.method},
              requestHeaders: ${JSON.stringify((extendedInterfaceInfo.req_headers || []).filter(item => item.name.toLowerCase() !== 'content-type').reduce((res, item) => {
      res[item.name] = item.value;
      return res;
    }, {}))},
              requestBodyType: RequestBodyType.${extendedInterfaceInfo.method === _types.Method.GET ? _types.RequestBodyType.query : extendedInterfaceInfo.req_body_type
    /* istanbul ignore next */
    || _types.RequestBodyType.none},
              responseBodyType: ResponseBodyType.${extendedInterfaceInfo.res_body_type},
              dataKey: dataKey${categoryUID},
              paramNames: ${paramNamesLiteral},
              queryNames: ${queryNamesLiteral},
              requestDataOptional: ${JSON.stringify(isRequestDataOptional)},
              requestDataJsonSchema: ${JSON.stringify((_syntheticalConfig$js = syntheticalConfig.jsonSchema) != null && _syntheticalConfig$js.enabled && ((_syntheticalConfig$js2 = syntheticalConfig.jsonSchema) == null ? void 0 : _syntheticalConfig$js2.requestData) !== false ? requestDataJsonSchema : {})},
              responseDataJsonSchema: ${JSON.stringify((_syntheticalConfig$js3 = syntheticalConfig.jsonSchema) != null && _syntheticalConfig$js3.enabled && ((_syntheticalConfig$js4 = syntheticalConfig.jsonSchema) == null ? void 0 : _syntheticalConfig$js4.responseData) !== false ? responseDataJsonSchema : {})},
              requestFunctionName: ${JSON.stringify(requestFunctionName)},
            }

            ${genComment(title => `接口 ${title} 的 **请求函数**`)}
            export const ${requestFunctionName} = (
              requestData${isRequestDataOptional ? '?' : ''}: ${requestDataTypeName},
              ...args: UserRequestRestArgs
            ) => {
              return request<${responseDataTypeName}>(
                prepare(${requestConfigName}, requestData),
                ...args,
              )
            }

            ${requestFunctionName}.requestConfig = ${requestConfigName}

            ${!syntheticalConfig.reactHooks || !syntheticalConfig.reactHooks.enabled ? '' : (0, _vtils.dedent)`
                  ${genComment(title => `接口 ${title} 的 **React Hook**`)}
                  export const ${requestHookName} = makeRequestHook<${requestDataTypeName}, ${requestConfigTypeName}, ReturnType<typeof ${requestFunctionName}>>(${requestFunctionName})
                `}
          `}
    `;
  }

  async destroy() {
    return Promise.all(this.disposes.map(async dispose => dispose()));
  }

}

exports.Generator = Generator;